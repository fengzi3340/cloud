#version 100

precision mediump float;

uniform sampler2D texSampler;
uniform mediump vec3 cameraPosition;
uniform mediump float cloudHeightMin;
uniform mediump float cloudHeightMax;
uniform mediump float currTime;
uniform mediump float density;
uniform mediump vec3 colorMin;
uniform mediump vec3 colorMax;

varying mediump vec4 worldPos;

#ifndef NEW_FOG
varying mediump vec4 oFogColor;
#else
uniform vec4 fogParam[3];

mediump float LinearizeDepth(mediump float depth, mediump float near, mediump float far) 
{
	mediump float z = depth * 2.0 - 1.0; // back to NDC 
	return (2.0 * near * far) / (far + near - z * (far - near));    
}

mediump float ComputeFog(mediump float z, mediump float w, mediump float density, mediump float near, mediump float far, mediump float min, mediump vec4 notUse)
{
	const mediump float LOG2 = 1.442695;
	mediump float fogFactor = exp2(-density * density * (z / w) * (z / w) * LOG2);
	fogFactor = clamp(fogFactor, 0.0, 1.0) + 1.0 - LinearizeDepth(z, near, far) / far;
	return clamp(fogFactor, min, 1.0);
}
#endif

float noise(vec3 x)
{
	vec3 p = floor(x);
	vec3 f = fract(x);
	f = smoothstep(0.0, 1.0, f);
	
	vec2 uv = (p.xy + vec2(37.0, 17.0)*p.z) + f.xy;
	float v1 = texture2D( texSampler, (uv)/256.0 ).x;
	float v2 = texture2D( texSampler, (uv + vec2(37.0, 17.0))/256.0 ).x;
	return mix(v1, v2, f.z);
}

float getCloudNoise(vec3 worldPos)
{
	vec3 coord = worldPos;
	float v = 1.0;
	if(coord.y < cloudHeightMin)
	{
		v = 1.0 - smoothstep(0.0, 1.0, min(cloudHeightMin - coord.y, 1.0));
	}
	else if(coord.y > cloudHeightMax)
	{
		v = 1.0 - smoothstep(0.0, 1.0, min(coord.y - cloudHeightMax, 1.0));
	}
	coord.x += currTime * 5.0;
	coord *= 0.05;
	float n  = noise(coord) * 0.5;   coord *= 3.0;
		  n += noise(coord) * 0.25;  coord *= 3.01;
		  n += noise(coord) * 0.125; coord *= 3.02;
		  n += noise(coord) * 0.0625;
		  n *= v;
	return smoothstep(0.0, 1.0, pow(max(n - 0.2, 0.0) * (1.0 / (1.0 - 0.2)), 0.5));
}

bool isInBox(vec3 currPos)
{
	if(currPos.y > cloudHeightMax || currPos.y < cloudHeightMin)
		return false;
	return true;
}

vec4 cloudRayMarchingOut(vec3 startPoint, vec3 direction, float maxDis)
{
	vec3 testPoint = startPoint;
	float cloudMin = cloudHeightMin;
	float cloudMax = cloudHeightMax;
	if(direction.y < 0.0)
	{
		cloudMin = cloudHeightMax;
		cloudMax = cloudHeightMin;
	}

	float delta = 0.0;
	if(direction.y != 0.0)
		delta = (cloudMin - startPoint.y) / direction.y;

	testPoint += direction * delta;

	if(distance(testPoint, startPoint) > maxDis)
		return vec4(0.0);

	direction *= (cloudHeightMax - cloudHeightMin) / 4.0;
	vec4 final = vec4(0.0);
	float fadeout = 1.0 - clamp(length(testPoint - startPoint) / maxDis * 2.0, 0.0, 1.0);
	for(int i = 0; i < 4; i++)
	{
		testPoint += direction;
		if(final.a > 0.99 || !isInBox(testPoint))
			continue;
		float calcDensity = getCloudNoise(testPoint) * fadeout;
		if(calcDensity > 0.0)
		{
			final += vec4(mix(colorMax, colorMin, calcDensity) * calcDensity, calcDensity) * (1.0 - final.a) * density;
		}
	}

	final = clamp(final, 0.0, 1.0);
	return final;
}

vec4 cloudRayMarchingIn(vec3 startPoint, vec3 direction, float maxDis)
{
	vec3 testPoint = startPoint;
	float cloudMin = startPoint.y;
	float cloudMax = cloudHeightMax;
	if(direction.y < 0.0)
		cloudMax = cloudHeightMin;
	direction *= min(abs(cloudHeightMax - startPoint.y), abs(cloudHeightMin - startPoint.y)) / 4.0;
	vec4 final = vec4(0.0);
	float fadeout = 1.0 - clamp(length(testPoint - startPoint) / maxDis * 2.0, 0.0, 1.0);
	for(int i = 0; i < 4; i++)
	{
		testPoint += direction;
		if(final.a > 0.99 || !isInBox(testPoint))
			continue;
		float density = getCloudNoise(testPoint) * fadeout;
		if(density > 0.0)
		{
			final += vec4(mix(colorMax, colorMin, density) * density, density) * (1.0 - final.a);
		}
	}

	final = clamp(final, 0.0, 1.0);
	return final;
}

void main(void)
{
	float viewDistance = 200.0;

	if(cameraPosition.y < cloudHeightMin - viewDistance || cameraPosition.y > cloudHeightMax + viewDistance)
		discard;

	//vec4 bgColor = texture2D(texSampler, texCoord_texture);

	vec3 rayDir = normalize(worldPos.xyz - cameraPosition.xyz);

	vec4 cloud = vec4(0.0);

	if(cameraPosition.y < cloudHeightMin || cameraPosition.y > cloudHeightMax)
		cloud = cloudRayMarchingOut(cameraPosition.xyz, rayDir, viewDistance);
	else
		cloud = cloudRayMarchingIn(cameraPosition.xyz, rayDir, viewDistance);

	if(cloud.a == 0.0)
		discard;

#ifdef NEW_FOG
	mediump vec4 oFogColor =  vec4(fogParam[1].rgb, ComputeFog(gl_FragCoord.z, gl_FragCoord.w, fogParam[0].z, fogParam[0].x, fogParam[0].y, fogParam[0].w, fogParam[2]));
#endif

	gl_FragColor = vec4(mix(oFogColor.rgb, cloud.rgb, oFogColor.a), cloud.a);
}
